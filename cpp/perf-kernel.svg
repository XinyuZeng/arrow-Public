<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="758" onload="init(evt)" viewBox="0 0 1200 758" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="758.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="741" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="741" > </text>
<g id="frames">
<g >
<title>alloc_pages_current (2 samples, 0.29%)</title><rect x="56.9" y="421" width="3.4" height="15.0" fill="rgb(245,157,14)" rx="2" ry="2" />
<text  x="59.85" y="431.5" ></text>
</g>
<g >
<title>getdents64 (1 samples, 0.15%)</title><rect x="27.4" y="677" width="1.7" height="15.0" fill="rgb(235,94,5)" rx="2" ry="2" />
<text  x="30.35" y="687.5" ></text>
</g>
<g >
<title>node::SpinEventLoop (2 samples, 0.29%)</title><rect x="16.9" y="629" width="3.5" height="15.0" fill="rgb(213,70,32)" rx="2" ry="2" />
<text  x="19.94" y="639.5" ></text>
</g>
<g >
<title>v8::internal::compiler::VariableTracker::Scope::~Scope (1 samples, 0.15%)</title><rect x="20.4" y="517" width="1.7" height="15.0" fill="rgb(244,1,54)" rx="2" ry="2" />
<text  x="23.41" y="527.5" ></text>
</g>
<g >
<title>do_idle (83 samples, 12.21%)</title><rect x="1046.0" y="565" width="144.0" height="15.0" fill="rgb(230,187,46)" rx="2" ry="2" />
<text  x="1048.97" y="575.5" >do_idle</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.15%)</title><rect x="18.7" y="149" width="1.7" height="15.0" fill="rgb(253,156,29)" rx="2" ry="2" />
<text  x="21.68" y="159.5" ></text>
</g>
<g >
<title>ondemand_readahead (4 samples, 0.59%)</title><rect x="56.9" y="469" width="6.9" height="15.0" fill="rgb(252,202,38)" rx="2" ry="2" />
<text  x="59.85" y="479.5" ></text>
</g>
<g >
<title>Builtins_PromiseFulfillReactionJob (2 samples, 0.29%)</title><rect x="16.9" y="373" width="3.5" height="15.0" fill="rgb(222,185,44)" rx="2" ry="2" />
<text  x="19.94" y="383.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.15%)</title><rect x="25.6" y="613" width="1.8" height="15.0" fill="rgb(239,164,51)" rx="2" ry="2" />
<text  x="28.62" y="623.5" ></text>
</g>
<g >
<title>start_kernel (83 samples, 12.21%)</title><rect x="1046.0" y="629" width="144.0" height="15.0" fill="rgb(217,145,39)" rx="2" ry="2" />
<text  x="1048.97" y="639.5" >start_kernel</text>
</g>
<g >
<title>[unknown] (1 samples, 0.15%)</title><rect x="88.1" y="645" width="1.7" height="15.0" fill="rgb(209,122,49)" rx="2" ry="2" />
<text  x="91.09" y="655.5" ></text>
</g>
<g >
<title>__x64_sys_getdents64 (1 samples, 0.15%)</title><rect x="27.4" y="629" width="1.7" height="15.0" fill="rgb(234,125,25)" rx="2" ry="2" />
<text  x="30.35" y="639.5" ></text>
</g>
<g >
<title>v8::internal::MicrotaskQueue::PerformCheckpoint (2 samples, 0.29%)</title><rect x="16.9" y="469" width="3.5" height="15.0" fill="rgb(249,88,0)" rx="2" ry="2" />
<text  x="19.94" y="479.5" ></text>
</g>
<g >
<title>__do_page_fault (1 samples, 0.15%)</title><rect x="30.8" y="597" width="1.8" height="15.0" fill="rgb(254,71,43)" rx="2" ry="2" />
<text  x="33.82" y="607.5" ></text>
</g>
<g >
<title>__x64_sys_futex (1 samples, 0.15%)</title><rect x="25.6" y="597" width="1.8" height="15.0" fill="rgb(224,88,16)" rx="2" ry="2" />
<text  x="28.62" y="607.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.15%)</title><rect x="30.8" y="549" width="1.8" height="15.0" fill="rgb(231,32,12)" rx="2" ry="2" />
<text  x="33.82" y="559.5" ></text>
</g>
<g >
<title>get_page_from_freelist (1 samples, 0.15%)</title><rect x="30.8" y="485" width="1.8" height="15.0" fill="rgb(207,127,19)" rx="2" ry="2" />
<text  x="33.82" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::~vector (1 samples, 0.15%)</title><rect x="10.0" y="613" width="1.7" height="15.0" fill="rgb(226,226,20)" rx="2" ry="2" />
<text  x="13.00" y="623.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (7 samples, 1.03%)</title><rect x="51.6" y="533" width="12.2" height="15.0" fill="rgb(221,223,5)" rx="2" ry="2" />
<text  x="54.65" y="543.5" ></text>
</g>
<g >
<title>[perf-19760.map] (2 samples, 0.29%)</title><rect x="16.9" y="293" width="3.5" height="15.0" fill="rgb(247,99,54)" rx="2" ry="2" />
<text  x="19.94" y="303.5" ></text>
</g>
<g >
<title>Builtins_RunMicrotasks (2 samples, 0.29%)</title><rect x="16.9" y="389" width="3.5" height="15.0" fill="rgb(235,207,43)" rx="2" ry="2" />
<text  x="19.94" y="399.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (3 samples, 0.44%)</title><rect x="51.6" y="469" width="5.3" height="15.0" fill="rgb(254,22,38)" rx="2" ry="2" />
<text  x="54.65" y="479.5" ></text>
</g>
<g >
<title>async_page_fault (1 samples, 0.15%)</title><rect x="30.8" y="645" width="1.8" height="15.0" fill="rgb(231,109,44)" rx="2" ry="2" />
<text  x="33.82" y="655.5" ></text>
</g>
<g >
<title>wake_up_q (1 samples, 0.15%)</title><rect x="18.7" y="69" width="1.7" height="15.0" fill="rgb(210,211,3)" rx="2" ry="2" />
<text  x="21.68" y="79.5" ></text>
</g>
<g >
<title>dup_mm (1 samples, 0.15%)</title><rect x="15.2" y="581" width="1.7" height="15.0" fill="rgb(227,118,44)" rx="2" ry="2" />
<text  x="18.21" y="591.5" ></text>
</g>
<g >
<title>v8::internal::OptimizingCompileDispatcher::CompileNext (3 samples, 0.44%)</title><rect x="20.4" y="629" width="5.2" height="15.0" fill="rgb(238,69,22)" rx="2" ry="2" />
<text  x="23.41" y="639.5" ></text>
</g>
<g >
<title>parquet::LevelDecoder::Decode (2 samples, 0.29%)</title><rect x="152.3" y="677" width="3.5" height="15.0" fill="rgb(224,171,15)" rx="2" ry="2" />
<text  x="155.29" y="687.5" ></text>
</g>
<g >
<title>uv__io_poll (2 samples, 0.29%)</title><rect x="16.9" y="597" width="3.5" height="15.0" fill="rgb(210,208,24)" rx="2" ry="2" />
<text  x="19.94" y="607.5" ></text>
</g>
<g >
<title>arch_cpu_idle (502 samples, 73.82%)</title><rect x="173.1" y="597" width="871.1" height="15.0" fill="rgb(253,140,28)" rx="2" ry="2" />
<text  x="176.12" y="607.5" >arch_cpu_idle</text>
</g>
<g >
<title>default_idle_call (502 samples, 73.82%)</title><rect x="173.1" y="613" width="871.1" height="15.0" fill="rgb(220,4,17)" rx="2" ry="2" />
<text  x="176.12" y="623.5" >default_idle_call</text>
</g>
<g >
<title>cpu_startup_entry (503 samples, 73.97%)</title><rect x="173.1" y="645" width="872.9" height="15.0" fill="rgb(228,159,45)" rx="2" ry="2" />
<text  x="176.12" y="655.5" >cpu_startup_entry</text>
</g>
<g >
<title>[perf-19760.map] (2 samples, 0.29%)</title><rect x="16.9" y="341" width="3.5" height="15.0" fill="rgb(253,76,15)" rx="2" ry="2" />
<text  x="19.94" y="351.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (1 samples, 0.15%)</title><rect x="30.8" y="661" width="1.8" height="15.0" fill="rgb(249,228,47)" rx="2" ry="2" />
<text  x="33.82" y="671.5" ></text>
</g>
<g >
<title>ps (1 samples, 0.15%)</title><rect x="27.4" y="693" width="1.7" height="15.0" fill="rgb(206,16,27)" rx="2" ry="2" />
<text  x="30.35" y="703.5" ></text>
</g>
<g >
<title>finish_task_switch (1 samples, 0.15%)</title><rect x="25.6" y="501" width="1.8" height="15.0" fill="rgb(248,37,47)" rx="2" ry="2" />
<text  x="28.62" y="511.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.15%)</title><rect x="13.5" y="677" width="1.7" height="15.0" fill="rgb(227,159,30)" rx="2" ry="2" />
<text  x="16.47" y="687.5" ></text>
</g>
<g >
<title>finish_task_switch (1 samples, 0.15%)</title><rect x="1044.2" y="581" width="1.8" height="15.0" fill="rgb(209,80,30)" rx="2" ry="2" />
<text  x="1047.24" y="591.5" ></text>
</g>
<g >
<title>xas_start (1 samples, 0.15%)</title><rect x="62.1" y="421" width="1.7" height="15.0" fill="rgb(227,11,48)" rx="2" ry="2" />
<text  x="65.06" y="431.5" ></text>
</g>
<g >
<title>generic_file_read_iter (7 samples, 1.03%)</title><rect x="51.6" y="517" width="12.2" height="15.0" fill="rgb(252,145,29)" rx="2" ry="2" />
<text  x="54.65" y="527.5" ></text>
</g>
<g >
<title>generic_file_buffered_read (7 samples, 1.03%)</title><rect x="51.6" y="501" width="12.2" height="15.0" fill="rgb(211,139,35)" rx="2" ry="2" />
<text  x="54.65" y="511.5" ></text>
</g>
<g >
<title>CKprobeEventMgr::run (1 samples, 0.15%)</title><rect x="10.0" y="661" width="1.7" height="15.0" fill="rgb(215,103,43)" rx="2" ry="2" />
<text  x="13.00" y="671.5" ></text>
</g>
<g >
<title>copy_page_range (1 samples, 0.15%)</title><rect x="15.2" y="549" width="1.7" height="15.0" fill="rgb(208,31,47)" rx="2" ry="2" />
<text  x="18.21" y="559.5" ></text>
</g>
<g >
<title>__libc_malloc (1 samples, 0.15%)</title><rect x="88.1" y="629" width="1.7" height="15.0" fill="rgb(231,39,34)" rx="2" ry="2" />
<text  x="91.09" y="639.5" ></text>
</g>
<g >
<title>__do_page_cache_readahead (4 samples, 0.59%)</title><rect x="56.9" y="453" width="6.9" height="15.0" fill="rgb(231,27,7)" rx="2" ry="2" />
<text  x="59.85" y="463.5" ></text>
</g>
<g >
<title>iterate_dir (1 samples, 0.15%)</title><rect x="27.4" y="597" width="1.7" height="15.0" fill="rgb(217,16,5)" rx="2" ry="2" />
<text  x="30.35" y="607.5" ></text>
</g>
<g >
<title>try_to_wake_up (1 samples, 0.15%)</title><rect x="18.7" y="53" width="1.7" height="15.0" fill="rgb(222,97,22)" rx="2" ry="2" />
<text  x="21.68" y="63.5" ></text>
</g>
<g >
<title>v8::internal::compiler::LoadEliminationPhase::Run (1 samples, 0.15%)</title><rect x="22.1" y="565" width="1.8" height="15.0" fill="rgb(240,209,32)" rx="2" ry="2" />
<text  x="25.15" y="575.5" ></text>
</g>
<g >
<title>v8::internal::compiler::PipelineImpl::SelectInstructions (1 samples, 0.15%)</title><rect x="23.9" y="565" width="1.7" height="15.0" fill="rgb(206,71,24)" rx="2" ry="2" />
<text  x="26.88" y="575.5" ></text>
</g>
<g >
<title>clear_page_erms (1 samples, 0.15%)</title><rect x="30.8" y="469" width="1.8" height="15.0" fill="rgb(221,200,16)" rx="2" ry="2" />
<text  x="33.82" y="479.5" ></text>
</g>
<g >
<title>node::(anonymous namespace)::PlatformWorkerThread (3 samples, 0.44%)</title><rect x="20.4" y="661" width="5.2" height="15.0" fill="rgb(232,156,14)" rx="2" ry="2" />
<text  x="23.41" y="671.5" ></text>
</g>
<g >
<title>node::fs::FSReqCallback::Resolve (2 samples, 0.29%)</title><rect x="16.9" y="533" width="3.5" height="15.0" fill="rgb(249,78,41)" rx="2" ry="2" />
<text  x="19.94" y="543.5" ></text>
</g>
<g >
<title>arch_cpu_idle (83 samples, 12.21%)</title><rect x="1046.0" y="533" width="144.0" height="15.0" fill="rgb(209,2,22)" rx="2" ry="2" />
<text  x="1048.97" y="543.5" >arch_cpu_idle</text>
</g>
<g >
<title>default_idle_call (83 samples, 12.21%)</title><rect x="1046.0" y="549" width="144.0" height="15.0" fill="rgb(232,73,28)" rx="2" ry="2" />
<text  x="1048.97" y="559.5" >default_idle_call</text>
</g>
<g >
<title>parquet::internal::FindMinMaxAvx2 (9 samples, 1.32%)</title><rect x="157.5" y="677" width="15.6" height="15.0" fill="rgb(232,38,41)" rx="2" ry="2" />
<text  x="160.50" y="687.5" ></text>
</g>
<g >
<title>secondary_startup_64 (586 samples, 86.18%)</title><rect x="173.1" y="677" width="1016.9" height="15.0" fill="rgb(208,121,21)" rx="2" ry="2" />
<text  x="176.12" y="687.5" >secondary_startup_64</text>
</g>
<g >
<title>x86_64_start_kernel (83 samples, 12.21%)</title><rect x="1046.0" y="661" width="144.0" height="15.0" fill="rgb(222,55,33)" rx="2" ry="2" />
<text  x="1048.97" y="671.5" >x86_64_start_kernel</text>
</g>
<g >
<title>do_futex (1 samples, 0.15%)</title><rect x="18.7" y="101" width="1.7" height="15.0" fill="rgb(246,66,7)" rx="2" ry="2" />
<text  x="21.68" y="111.5" ></text>
</g>
<g >
<title>v8::internal::compiler::EffectGraphReducer::ReduceFrom (1 samples, 0.15%)</title><rect x="20.4" y="549" width="1.7" height="15.0" fill="rgb(236,43,38)" rx="2" ry="2" />
<text  x="23.41" y="559.5" ></text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 0.15%)</title><rect x="30.8" y="581" width="1.8" height="15.0" fill="rgb(243,122,48)" rx="2" ry="2" />
<text  x="33.82" y="591.5" ></text>
</g>
<g >
<title>v8::internal::compiler::LiveRangeBuilder::BuildLiveRanges (1 samples, 0.15%)</title><rect x="23.9" y="517" width="1.7" height="15.0" fill="rgb(229,210,6)" rx="2" ry="2" />
<text  x="26.88" y="527.5" ></text>
</g>
<g >
<title>non-virtual thunk to v8::internal::CancelableTask::Run (3 samples, 0.44%)</title><rect x="20.4" y="645" width="5.2" height="15.0" fill="rgb(232,84,48)" rx="2" ry="2" />
<text  x="23.41" y="655.5" ></text>
</g>
<g >
<title>next_tgid (1 samples, 0.15%)</title><rect x="27.4" y="549" width="1.7" height="15.0" fill="rgb(217,137,5)" rx="2" ry="2" />
<text  x="30.35" y="559.5" ></text>
</g>
<g >
<title>new_sync_read (7 samples, 1.03%)</title><rect x="51.6" y="549" width="12.2" height="15.0" fill="rgb(239,74,54)" rx="2" ry="2" />
<text  x="54.65" y="559.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.15%)</title><rect x="27.4" y="661" width="1.7" height="15.0" fill="rgb(227,208,2)" rx="2" ry="2" />
<text  x="30.35" y="671.5" ></text>
</g>
<g >
<title>Builtins_AsyncFunctionAwaitResolveClosure (2 samples, 0.29%)</title><rect x="16.9" y="357" width="3.5" height="15.0" fill="rgb(237,178,45)" rx="2" ry="2" />
<text  x="19.94" y="367.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (1 samples, 0.15%)</title><rect x="29.1" y="661" width="1.7" height="15.0" fill="rgb(218,66,28)" rx="2" ry="2" />
<text  x="32.09" y="671.5" ></text>
</g>
<g >
<title>v8::internal::MicrotaskQueue::RunMicrotasks (2 samples, 0.29%)</title><rect x="16.9" y="453" width="3.5" height="15.0" fill="rgb(210,220,29)" rx="2" ry="2" />
<text  x="19.94" y="463.5" ></text>
</g>
<g >
<title>node::InternalCallbackScope::Close (2 samples, 0.29%)</title><rect x="16.9" y="485" width="3.5" height="15.0" fill="rgb(225,47,26)" rx="2" ry="2" />
<text  x="19.94" y="495.5" ></text>
</g>
<g >
<title>dl_main (1 samples, 0.15%)</title><rect x="32.6" y="645" width="1.7" height="15.0" fill="rgb(227,181,23)" rx="2" ry="2" />
<text  x="35.56" y="655.5" ></text>
</g>
<g >
<title>schedule_idle (1 samples, 0.15%)</title><rect x="1044.2" y="613" width="1.8" height="15.0" fill="rgb(226,46,54)" rx="2" ry="2" />
<text  x="1047.24" y="623.5" ></text>
</g>
<g >
<title>vfs_read (7 samples, 1.03%)</title><rect x="51.6" y="581" width="12.2" height="15.0" fill="rgb(239,34,34)" rx="2" ry="2" />
<text  x="54.65" y="591.5" ></text>
</g>
<g >
<title>__vfs_read (7 samples, 1.03%)</title><rect x="51.6" y="565" width="12.2" height="15.0" fill="rgb(253,40,14)" rx="2" ry="2" />
<text  x="54.65" y="575.5" ></text>
</g>
<g >
<title>v8::internal::(anonymous namespace)::Invoke (2 samples, 0.29%)</title><rect x="16.9" y="421" width="3.5" height="15.0" fill="rgb(228,101,10)" rx="2" ry="2" />
<text  x="19.94" y="431.5" ></text>
</g>
<g >
<title>ksys_pread64 (7 samples, 1.03%)</title><rect x="51.6" y="597" width="12.2" height="15.0" fill="rgb(241,204,14)" rx="2" ry="2" />
<text  x="54.65" y="607.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.15%)</title><rect x="1044.2" y="597" width="1.8" height="15.0" fill="rgb(218,1,12)" rx="2" ry="2" />
<text  x="1047.24" y="607.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.15%)</title><rect x="25.6" y="533" width="1.8" height="15.0" fill="rgb(219,193,5)" rx="2" ry="2" />
<text  x="28.62" y="543.5" ></text>
</g>
<g >
<title>copy_pte_range.isra.0 (1 samples, 0.15%)</title><rect x="15.2" y="533" width="1.7" height="15.0" fill="rgb(240,85,19)" rx="2" ry="2" />
<text  x="18.21" y="543.5" ></text>
</g>
<g >
<title>ksys_getdents64 (1 samples, 0.15%)</title><rect x="27.4" y="613" width="1.7" height="15.0" fill="rgb(219,41,42)" rx="2" ry="2" />
<text  x="30.35" y="623.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.15%)</title><rect x="27.4" y="645" width="1.7" height="15.0" fill="rgb(223,106,49)" rx="2" ry="2" />
<text  x="30.35" y="655.5" ></text>
</g>
<g >
<title>__lll_lock_wait (1 samples, 0.15%)</title><rect x="25.6" y="645" width="1.8" height="15.0" fill="rgb(222,63,1)" rx="2" ry="2" />
<text  x="28.62" y="655.5" ></text>
</g>
<g >
<title>do_futex (1 samples, 0.15%)</title><rect x="25.6" y="581" width="1.8" height="15.0" fill="rgb(222,19,0)" rx="2" ry="2" />
<text  x="28.62" y="591.5" ></text>
</g>
<g >
<title>v8::internal::compiler::PipelineCompilationJob::ExecuteJobImpl (3 samples, 0.44%)</title><rect x="20.4" y="597" width="5.2" height="15.0" fill="rgb(212,136,39)" rx="2" ry="2" />
<text  x="23.41" y="607.5" ></text>
</g>
<g >
<title>copy_page_to_iter (3 samples, 0.44%)</title><rect x="51.6" y="485" width="5.3" height="15.0" fill="rgb(244,167,37)" rx="2" ry="2" />
<text  x="54.65" y="495.5" ></text>
</g>
<g >
<title>v8::internal::(anonymous namespace)::HandleApiCallHelper&lt;false&gt; (1 samples, 0.15%)</title><rect x="18.7" y="213" width="1.7" height="15.0" fill="rgb(239,45,24)" rx="2" ry="2" />
<text  x="21.68" y="223.5" ></text>
</g>
<g >
<title>arrow::util::RleDecoder::GetBatchWithDict&lt;parquet::ByteArray&gt; (29 samples, 4.26%)</title><rect x="98.5" y="677" width="50.3" height="15.0" fill="rgb(236,204,21)" rx="2" ry="2" />
<text  x="101.50" y="687.5" >arrow..</text>
</g>
<g >
<title>rest_init (83 samples, 12.21%)</title><rect x="1046.0" y="597" width="144.0" height="15.0" fill="rgb(207,215,16)" rx="2" ry="2" />
<text  x="1048.97" y="607.5" >rest_init</text>
</g>
<g >
<title>v8::internal::compiler::EscapeAnalysis::Reduce (1 samples, 0.15%)</title><rect x="20.4" y="533" width="1.7" height="15.0" fill="rgb(225,197,19)" rx="2" ry="2" />
<text  x="23.41" y="543.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (1 samples, 0.15%)</title><rect x="30.8" y="501" width="1.8" height="15.0" fill="rgb(237,158,44)" rx="2" ry="2" />
<text  x="33.82" y="511.5" ></text>
</g>
<g >
<title>dup_mmap (1 samples, 0.15%)</title><rect x="15.2" y="565" width="1.7" height="15.0" fill="rgb(252,143,20)" rx="2" ry="2" />
<text  x="18.21" y="575.5" ></text>
</g>
<g >
<title>Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (1 samples, 0.15%)</title><rect x="18.7" y="245" width="1.7" height="15.0" fill="rgb(208,8,6)" rx="2" ry="2" />
<text  x="21.68" y="255.5" ></text>
</g>
<g >
<title>get_task_policy.part.0 (1 samples, 0.15%)</title><rect x="58.6" y="405" width="1.7" height="15.0" fill="rgb(242,114,18)" rx="2" ry="2" />
<text  x="61.59" y="415.5" ></text>
</g>
<g >
<title>v8::internal::compiler::LiveRangeBuilder::ProcessInstructions (1 samples, 0.15%)</title><rect x="23.9" y="501" width="1.7" height="15.0" fill="rgb(226,59,47)" rx="2" ry="2" />
<text  x="26.88" y="511.5" ></text>
</g>
<g >
<title>node::fs::LStat (1 samples, 0.15%)</title><rect x="18.7" y="197" width="1.7" height="15.0" fill="rgb(207,209,1)" rx="2" ry="2" />
<text  x="21.68" y="207.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.15%)</title><rect x="25.6" y="629" width="1.8" height="15.0" fill="rgb(236,207,48)" rx="2" ry="2" />
<text  x="28.62" y="639.5" ></text>
</g>
<g >
<title>pthread_mutex_unlock (1 samples, 0.15%)</title><rect x="18.7" y="165" width="1.7" height="15.0" fill="rgb(217,19,39)" rx="2" ry="2" />
<text  x="21.68" y="175.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.15%)</title><rect x="18.7" y="37" width="1.7" height="15.0" fill="rgb(243,196,41)" rx="2" ry="2" />
<text  x="21.68" y="47.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (1 samples, 0.15%)</title><rect x="56.9" y="405" width="1.7" height="15.0" fill="rgb(215,54,8)" rx="2" ry="2" />
<text  x="59.85" y="415.5" ></text>
</g>
<g >
<title>v8::internal::compiler::GraphReducer::ReduceTop (1 samples, 0.15%)</title><rect x="22.1" y="533" width="1.8" height="15.0" fill="rgb(232,98,37)" rx="2" ry="2" />
<text  x="25.15" y="543.5" ></text>
</g>
<g >
<title>[perf-19760.map] (1 samples, 0.15%)</title><rect x="18.7" y="261" width="1.7" height="15.0" fill="rgb(233,181,30)" rx="2" ry="2" />
<text  x="21.68" y="271.5" ></text>
</g>
<g >
<title>node::fs::AfterScanDir (2 samples, 0.29%)</title><rect x="16.9" y="549" width="3.5" height="15.0" fill="rgb(214,208,37)" rx="2" ry="2" />
<text  x="19.94" y="559.5" ></text>
</g>
<g >
<title>alloc_pages_vma (1 samples, 0.15%)</title><rect x="30.8" y="517" width="1.8" height="15.0" fill="rgb(251,145,9)" rx="2" ry="2" />
<text  x="33.82" y="527.5" ></text>
</g>
<g >
<title>stTraceEvent::~stTraceEvent (1 samples, 0.15%)</title><rect x="10.0" y="629" width="1.7" height="15.0" fill="rgb(217,44,22)" rx="2" ry="2" />
<text  x="13.00" y="639.5" ></text>
</g>
<g >
<title>v8::internal::compiler::PipelineImpl::AllocateRegistersForTopTier (1 samples, 0.15%)</title><rect x="23.9" y="549" width="1.7" height="15.0" fill="rgb(220,181,25)" rx="2" ry="2" />
<text  x="26.88" y="559.5" ></text>
</g>
<g >
<title>proc_root_readdir (1 samples, 0.15%)</title><rect x="27.4" y="581" width="1.7" height="15.0" fill="rgb(240,113,15)" rx="2" ry="2" />
<text  x="30.35" y="591.5" ></text>
</g>
<g >
<title>node::AsyncWrap::MakeCallback (2 samples, 0.29%)</title><rect x="16.9" y="517" width="3.5" height="15.0" fill="rgb(250,195,53)" rx="2" ry="2" />
<text  x="19.94" y="527.5" ></text>
</g>
<g >
<title>do_async_page_fault (1 samples, 0.15%)</title><rect x="30.8" y="629" width="1.8" height="15.0" fill="rgb(225,139,24)" rx="2" ry="2" />
<text  x="33.82" y="639.5" ></text>
</g>
<g >
<title>do_page_fault (1 samples, 0.15%)</title><rect x="30.8" y="613" width="1.8" height="15.0" fill="rgb(235,130,20)" rx="2" ry="2" />
<text  x="33.82" y="623.5" ></text>
</g>
<g >
<title>do_syscall_64 (7 samples, 1.03%)</title><rect x="51.6" y="629" width="12.2" height="15.0" fill="rgb(251,126,10)" rx="2" ry="2" />
<text  x="54.65" y="639.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.15%)</title><rect x="15.2" y="645" width="1.7" height="15.0" fill="rgb(220,229,21)" rx="2" ry="2" />
<text  x="18.21" y="655.5" ></text>
</g>
<g >
<title>Builtins_ArrayMap (2 samples, 0.29%)</title><rect x="16.9" y="325" width="3.5" height="15.0" fill="rgb(205,195,33)" rx="2" ry="2" />
<text  x="19.94" y="335.5" ></text>
</g>
<g >
<title>AliYunDun (1 samples, 0.15%)</title><rect x="10.0" y="693" width="1.7" height="15.0" fill="rgb(240,77,13)" rx="2" ry="2" />
<text  x="13.00" y="703.5" ></text>
</g>
<g >
<title>[perf-19760.map] (2 samples, 0.29%)</title><rect x="16.9" y="277" width="3.5" height="15.0" fill="rgb(214,124,49)" rx="2" ry="2" />
<text  x="19.94" y="287.5" ></text>
</g>
<g >
<title>[unknown] (35 samples, 5.15%)</title><rect x="29.1" y="677" width="60.7" height="15.0" fill="rgb(214,191,36)" rx="2" ry="2" />
<text  x="32.09" y="687.5" >[unkno..</text>
</g>
<g >
<title>arrow::internal::unpack32 (6 samples, 0.88%)</title><rect x="41.2" y="661" width="10.4" height="15.0" fill="rgb(249,144,31)" rx="2" ry="2" />
<text  x="44.24" y="671.5" ></text>
</g>
<g >
<title>parquet::(anonymous namespace)::TypedColumnReaderImpl&lt;parquet::PhysicalType&lt; (2 samples, 0.29%)</title><rect x="148.8" y="677" width="3.5" height="15.0" fill="rgb(217,28,42)" rx="2" ry="2" />
<text  x="151.82" y="687.5" ></text>
</g>
<g >
<title>all (680 samples, 100%)</title><rect x="10.0" y="709" width="1180.0" height="15.0" fill="rgb(243,79,12)" rx="2" ry="2" />
<text  x="13.00" y="719.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (7 samples, 1.03%)</title><rect x="51.6" y="645" width="12.2" height="15.0" fill="rgb(245,150,30)" rx="2" ry="2" />
<text  x="54.65" y="655.5" ></text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.15%)</title><rect x="30.8" y="565" width="1.8" height="15.0" fill="rgb(222,196,7)" rx="2" ry="2" />
<text  x="33.82" y="575.5" ></text>
</g>
<g >
<title>node::InternalMakeCallback (2 samples, 0.29%)</title><rect x="16.9" y="501" width="3.5" height="15.0" fill="rgb(208,127,51)" rx="2" ry="2" />
<text  x="19.94" y="511.5" ></text>
</g>
<g >
<title>__pthread_enable_asynccancel (1 samples, 0.15%)</title><rect x="13.5" y="661" width="1.7" height="15.0" fill="rgb(212,54,52)" rx="2" ry="2" />
<text  x="16.47" y="671.5" ></text>
</g>
<g >
<title>arrow::internal::unpack32 (1 samples, 0.15%)</title><rect x="96.8" y="677" width="1.7" height="15.0" fill="rgb(250,31,10)" rx="2" ry="2" />
<text  x="99.76" y="687.5" ></text>
</g>
<g >
<title>futex_wait_queue_me (1 samples, 0.15%)</title><rect x="25.6" y="549" width="1.8" height="15.0" fill="rgb(237,33,49)" rx="2" ry="2" />
<text  x="28.62" y="559.5" ></text>
</g>
<g >
<title>proc_pid_readdir (1 samples, 0.15%)</title><rect x="27.4" y="565" width="1.7" height="15.0" fill="rgb(218,197,37)" rx="2" ry="2" />
<text  x="30.35" y="575.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.15%)</title><rect x="25.6" y="517" width="1.8" height="15.0" fill="rgb(238,154,27)" rx="2" ry="2" />
<text  x="28.62" y="527.5" ></text>
</g>
<g >
<title>cpuUsage.sh (1 samples, 0.15%)</title><rect x="11.7" y="693" width="1.8" height="15.0" fill="rgb(219,174,7)" rx="2" ry="2" />
<text  x="14.74" y="703.5" ></text>
</g>
<g >
<title>xa_load (2 samples, 0.29%)</title><rect x="60.3" y="437" width="3.5" height="15.0" fill="rgb(232,99,24)" rx="2" ry="2" />
<text  x="63.32" y="447.5" ></text>
</g>
<g >
<title>v8::internal::Builtin_HandleApiCall (1 samples, 0.15%)</title><rect x="18.7" y="229" width="1.7" height="15.0" fill="rgb(209,61,0)" rx="2" ry="2" />
<text  x="21.68" y="239.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;arrow::io::BufferReader, std::allocator&lt;arrow::io::BufferReader&gt;,  (1 samples, 0.15%)</title><rect x="88.1" y="661" width="1.7" height="15.0" fill="rgb(229,161,0)" rx="2" ry="2" />
<text  x="91.09" y="671.5" ></text>
</g>
<g >
<title>arrow::internal::unpack32_avx512 (5 samples, 0.74%)</title><rect x="43.0" y="645" width="8.6" height="15.0" fill="rgb(227,117,9)" rx="2" ry="2" />
<text  x="45.97" y="655.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.15%)</title><rect x="18.7" y="133" width="1.7" height="15.0" fill="rgb(213,172,37)" rx="2" ry="2" />
<text  x="21.68" y="143.5" ></text>
</g>
<g >
<title>arrow::bit_util::BitReader::GetVlqInt (2 samples, 0.29%)</title><rect x="93.3" y="677" width="3.5" height="15.0" fill="rgb(243,116,53)" rx="2" ry="2" />
<text  x="96.29" y="687.5" ></text>
</g>
<g >
<title>v8::internal::compiler::EscapeAnalysisPhase::Run (1 samples, 0.15%)</title><rect x="20.4" y="565" width="1.7" height="15.0" fill="rgb(244,26,28)" rx="2" ry="2" />
<text  x="23.41" y="575.5" ></text>
</g>
<g >
<title>x86_64_start_reservations (83 samples, 12.21%)</title><rect x="1046.0" y="645" width="144.0" height="15.0" fill="rgb(241,157,13)" rx="2" ry="2" />
<text  x="1048.97" y="655.5" >x86_64_start_reser..</text>
</g>
<g >
<title>copy_process (1 samples, 0.15%)</title><rect x="15.2" y="597" width="1.7" height="15.0" fill="rgb(242,189,31)" rx="2" ry="2" />
<text  x="18.21" y="607.5" ></text>
</g>
<g >
<title>_dl_load_cache_lookup (1 samples, 0.15%)</title><rect x="11.7" y="677" width="1.8" height="15.0" fill="rgb(231,32,4)" rx="2" ry="2" />
<text  x="14.74" y="687.5" ></text>
</g>
<g >
<title>__x64_sys_futex (1 samples, 0.15%)</title><rect x="18.7" y="117" width="1.7" height="15.0" fill="rgb(214,164,26)" rx="2" ry="2" />
<text  x="21.68" y="127.5" ></text>
</g>
<g >
<title>parquet::ScanFileContents (1 samples, 0.15%)</title><rect x="155.8" y="677" width="1.7" height="15.0" fill="rgb(217,88,31)" rx="2" ry="2" />
<text  x="158.76" y="687.5" ></text>
</g>
<g >
<title>__page_cache_alloc (2 samples, 0.29%)</title><rect x="56.9" y="437" width="3.4" height="15.0" fill="rgb(221,203,7)" rx="2" ry="2" />
<text  x="59.85" y="447.5" ></text>
</g>
<g >
<title>uv__work_done (2 samples, 0.29%)</title><rect x="16.9" y="565" width="3.5" height="15.0" fill="rgb(231,22,33)" rx="2" ry="2" />
<text  x="19.94" y="575.5" ></text>
</g>
<g >
<title>Builtins_JSRunMicrotasksEntry (2 samples, 0.29%)</title><rect x="16.9" y="405" width="3.5" height="15.0" fill="rgb(211,47,19)" rx="2" ry="2" />
<text  x="19.94" y="415.5" ></text>
</g>
<g >
<title>start_secondary (503 samples, 73.97%)</title><rect x="173.1" y="661" width="872.9" height="15.0" fill="rgb(225,89,6)" rx="2" ry="2" />
<text  x="176.12" y="671.5" >start_secondary</text>
</g>
<g >
<title>std::_Vector_base&lt;char, std::allocator&lt;char&gt; &gt;::~_Vector_base (1 samples, 0.15%)</title><rect x="10.0" y="597" width="1.7" height="15.0" fill="rgb(244,46,0)" rx="2" ry="2" />
<text  x="13.00" y="607.5" ></text>
</g>
<g >
<title>CKprobeEventMgr::GetNextEvent (1 samples, 0.15%)</title><rect x="10.0" y="645" width="1.7" height="15.0" fill="rgb(249,11,45)" rx="2" ry="2" />
<text  x="13.00" y="655.5" ></text>
</g>
<g >
<title>uv_fs_lstat (1 samples, 0.15%)</title><rect x="18.7" y="181" width="1.7" height="15.0" fill="rgb(245,184,19)" rx="2" ry="2" />
<text  x="21.68" y="191.5" ></text>
</g>
<g >
<title>aqs::CThreadUtil::ThreadFunc (1 samples, 0.15%)</title><rect x="10.0" y="677" width="1.7" height="15.0" fill="rgb(229,189,18)" rx="2" ry="2" />
<text  x="13.00" y="687.5" ></text>
</g>
<g >
<title>start_thread (4 samples, 0.59%)</title><rect x="20.4" y="677" width="7.0" height="15.0" fill="rgb(231,217,9)" rx="2" ry="2" />
<text  x="23.41" y="687.5" ></text>
</g>
<g >
<title>native_safe_halt (502 samples, 73.82%)</title><rect x="173.1" y="581" width="871.1" height="15.0" fill="rgb(243,201,29)" rx="2" ry="2" />
<text  x="176.12" y="591.5" >native_safe_halt</text>
</g>
<g >
<title>arch_call_rest_init (83 samples, 12.21%)</title><rect x="1046.0" y="613" width="144.0" height="15.0" fill="rgb(210,155,19)" rx="2" ry="2" />
<text  x="1048.97" y="623.5" >arch_call_rest_init</text>
</g>
<g >
<title>uv_run (2 samples, 0.29%)</title><rect x="16.9" y="613" width="3.5" height="15.0" fill="rgb(211,155,46)" rx="2" ry="2" />
<text  x="19.94" y="623.5" ></text>
</g>
<g >
<title>v8::internal::compiler::PersistentMap&lt;v8::internal::compiler::Variable, v8::internal::compiler::Node*, v8::base::hash&lt;v8::internal::compiler::Variable&gt; &gt;::operator== (1 samples, 0.15%)</title><rect x="20.4" y="501" width="1.7" height="15.0" fill="rgb(227,67,50)" rx="2" ry="2" />
<text  x="23.41" y="511.5" ></text>
</g>
<g >
<title>_do_fork (1 samples, 0.15%)</title><rect x="15.2" y="613" width="1.7" height="15.0" fill="rgb(229,211,50)" rx="2" ry="2" />
<text  x="18.21" y="623.5" ></text>
</g>
<g >
<title>native_safe_halt (83 samples, 12.21%)</title><rect x="1046.0" y="517" width="144.0" height="15.0" fill="rgb(236,167,48)" rx="2" ry="2" />
<text  x="1048.97" y="527.5" >native_safe_halt</text>
</g>
<g >
<title>cpu_startup_entry (83 samples, 12.21%)</title><rect x="1046.0" y="581" width="144.0" height="15.0" fill="rgb(220,73,42)" rx="2" ry="2" />
<text  x="1048.97" y="591.5" >cpu_startup_entry</text>
</g>
<g >
<title>raw_reader_v2 (83 samples, 12.21%)</title><rect x="29.1" y="693" width="144.0" height="15.0" fill="rgb(205,224,50)" rx="2" ry="2" />
<text  x="32.09" y="703.5" >raw_reader_v2</text>
</g>
<g >
<title>snappy::RawUncompress (14 samples, 2.06%)</title><rect x="63.8" y="661" width="24.3" height="15.0" fill="rgb(209,3,2)" rx="2" ry="2" />
<text  x="66.79" y="671.5" >s..</text>
</g>
<g >
<title>v8::internal::OptimizedCompilationJob::ExecuteJob (3 samples, 0.44%)</title><rect x="20.4" y="613" width="5.2" height="15.0" fill="rgb(221,105,1)" rx="2" ry="2" />
<text  x="23.41" y="623.5" ></text>
</g>
<g >
<title>node (8 samples, 1.18%)</title><rect x="13.5" y="693" width="13.9" height="15.0" fill="rgb(226,190,45)" rx="2" ry="2" />
<text  x="16.47" y="703.5" ></text>
</g>
<g >
<title>v8::internal::compiler::PipelineImpl::Run&lt;v8::internal::compiler::BuildLiveRangesPhase&gt; (1 samples, 0.15%)</title><rect x="23.9" y="533" width="1.7" height="15.0" fill="rgb(247,215,37)" rx="2" ry="2" />
<text  x="26.88" y="543.5" ></text>
</g>
<g >
<title>futex_wait (1 samples, 0.15%)</title><rect x="25.6" y="565" width="1.8" height="15.0" fill="rgb(236,142,40)" rx="2" ry="2" />
<text  x="28.62" y="575.5" ></text>
</g>
<g >
<title>[perf-19760.map] (2 samples, 0.29%)</title><rect x="16.9" y="309" width="3.5" height="15.0" fill="rgb(215,182,23)" rx="2" ry="2" />
<text  x="19.94" y="319.5" ></text>
</g>
<g >
<title>pread64 (7 samples, 1.03%)</title><rect x="51.6" y="661" width="12.2" height="15.0" fill="rgb(206,112,53)" rx="2" ry="2" />
<text  x="54.65" y="671.5" ></text>
</g>
<g >
<title>uv__async_io.part.1 (2 samples, 0.29%)</title><rect x="16.9" y="581" width="3.5" height="15.0" fill="rgb(232,95,18)" rx="2" ry="2" />
<text  x="19.94" y="591.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.15%)</title><rect x="15.2" y="661" width="1.7" height="15.0" fill="rgb(206,224,33)" rx="2" ry="2" />
<text  x="18.21" y="671.5" ></text>
</g>
<g >
<title>do_anonymous_page (1 samples, 0.15%)</title><rect x="30.8" y="533" width="1.8" height="15.0" fill="rgb(207,225,4)" rx="2" ry="2" />
<text  x="33.82" y="543.5" ></text>
</g>
<g >
<title>page_cache_async_readahead (4 samples, 0.59%)</title><rect x="56.9" y="485" width="6.9" height="15.0" fill="rgb(247,216,43)" rx="2" ry="2" />
<text  x="59.85" y="495.5" ></text>
</g>
<g >
<title>v8::internal::compiler::GraphReducer::ReduceNode (1 samples, 0.15%)</title><rect x="22.1" y="549" width="1.8" height="15.0" fill="rgb(207,190,29)" rx="2" ry="2" />
<text  x="25.15" y="559.5" ></text>
</g>
<g >
<title>_dl_relocate_object (1 samples, 0.15%)</title><rect x="32.6" y="629" width="1.7" height="15.0" fill="rgb(241,23,42)" rx="2" ry="2" />
<text  x="35.56" y="639.5" ></text>
</g>
<g >
<title>__x64_sys_pread64 (7 samples, 1.03%)</title><rect x="51.6" y="613" width="12.2" height="15.0" fill="rgb(230,179,29)" rx="2" ry="2" />
<text  x="54.65" y="623.5" ></text>
</g>
<g >
<title>__x64_sys_clone (1 samples, 0.15%)</title><rect x="15.2" y="629" width="1.7" height="15.0" fill="rgb(244,112,1)" rx="2" ry="2" />
<text  x="18.21" y="639.5" ></text>
</g>
<g >
<title>worker (1 samples, 0.15%)</title><rect x="25.6" y="661" width="1.8" height="15.0" fill="rgb(247,87,44)" rx="2" ry="2" />
<text  x="28.62" y="671.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (1 samples, 0.15%)</title><rect x="32.6" y="661" width="1.7" height="15.0" fill="rgb(206,180,10)" rx="2" ry="2" />
<text  x="35.56" y="671.5" ></text>
</g>
<g >
<title>swapper (586 samples, 86.18%)</title><rect x="173.1" y="693" width="1016.9" height="15.0" fill="rgb(205,90,36)" rx="2" ry="2" />
<text  x="176.12" y="703.5" >swapper</text>
</g>
<g >
<title>__fork (1 samples, 0.15%)</title><rect x="15.2" y="677" width="1.7" height="15.0" fill="rgb(230,218,11)" rx="2" ry="2" />
<text  x="18.21" y="687.5" ></text>
</g>
<g >
<title>node::NodeMainInstance::Run (2 samples, 0.29%)</title><rect x="16.9" y="645" width="3.5" height="15.0" fill="rgb(223,157,43)" rx="2" ry="2" />
<text  x="19.94" y="655.5" ></text>
</g>
<g >
<title>futex_wake (1 samples, 0.15%)</title><rect x="18.7" y="85" width="1.7" height="15.0" fill="rgb(209,135,32)" rx="2" ry="2" />
<text  x="21.68" y="95.5" ></text>
</g>
<g >
<title>node::Start (2 samples, 0.29%)</title><rect x="16.9" y="661" width="3.5" height="15.0" fill="rgb(205,116,19)" rx="2" ry="2" />
<text  x="19.94" y="671.5" ></text>
</g>
<g >
<title>v8::internal::compiler::PipelineImpl::OptimizeGraph (3 samples, 0.44%)</title><rect x="20.4" y="581" width="5.2" height="15.0" fill="rgb(230,169,24)" rx="2" ry="2" />
<text  x="23.41" y="591.5" ></text>
</g>
<g >
<title>arrow::bit_util::BitReader::GetBatch&lt;int&gt; (4 samples, 0.59%)</title><rect x="34.3" y="661" width="6.9" height="15.0" fill="rgb(227,50,39)" rx="2" ry="2" />
<text  x="37.29" y="671.5" ></text>
</g>
<g >
<title>do_idle (503 samples, 73.97%)</title><rect x="173.1" y="629" width="872.9" height="15.0" fill="rgb(218,124,39)" rx="2" ry="2" />
<text  x="176.12" y="639.5" >do_idle</text>
</g>
<g >
<title>arrow::bit_util::BitReader::GetBatch&lt;int&gt; (2 samples, 0.29%)</title><rect x="89.8" y="677" width="3.5" height="15.0" fill="rgb(216,98,1)" rx="2" ry="2" />
<text  x="92.82" y="687.5" ></text>
</g>
<g >
<title>v8::internal::Execution::TryRunMicrotasks (2 samples, 0.29%)</title><rect x="16.9" y="437" width="3.5" height="15.0" fill="rgb(205,161,10)" rx="2" ry="2" />
<text  x="19.94" y="447.5" ></text>
</g>
<g >
<title>__libc_start_main (2 samples, 0.29%)</title><rect x="16.9" y="677" width="3.5" height="15.0" fill="rgb(226,19,23)" rx="2" ry="2" />
<text  x="19.94" y="687.5" ></text>
</g>
</g>
</svg>
