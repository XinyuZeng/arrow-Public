<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="486.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="469" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="469" > </text>
<g id="frames">
<g >
<title>copy_page_to_iter (2 samples, 0.25%)</title><rect x="33.8" y="213" width="3.0" height="15.0" fill="rgb(229,145,23)" rx="2" ry="2" />
<text  x="36.84" y="223.5" ></text>
</g>
<g >
<title>PageHuge (1 samples, 0.13%)</title><rect x="18.9" y="37" width="1.5" height="15.0" fill="rgb(227,212,17)" rx="2" ry="2" />
<text  x="21.94" y="47.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (1 samples, 0.13%)</title><rect x="18.9" y="389" width="1.5" height="15.0" fill="rgb(230,185,3)" rx="2" ry="2" />
<text  x="21.94" y="399.5" ></text>
</g>
<g >
<title>generic_file_read_iter (7 samples, 0.88%)</title><rect x="33.8" y="245" width="10.5" height="15.0" fill="rgb(223,68,26)" rx="2" ry="2" />
<text  x="36.84" y="255.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.13%)</title><rect x="139.6" y="405" width="1.5" height="15.0" fill="rgb(244,110,43)" rx="2" ry="2" />
<text  x="142.62" y="415.5" ></text>
</g>
<g >
<title>arrow::internal::unpack32_avx512 (4 samples, 0.51%)</title><rect x="27.9" y="373" width="5.9" height="15.0" fill="rgb(207,117,32)" rx="2" ry="2" />
<text  x="30.88" y="383.5" ></text>
</g>
<g >
<title>__page_cache_alloc (4 samples, 0.51%)</title><rect x="36.8" y="165" width="6.0" height="15.0" fill="rgb(205,134,28)" rx="2" ry="2" />
<text  x="39.82" y="175.5" ></text>
</g>
<g >
<title>do_idle (605 samples, 76.39%)</title><rect x="141.1" y="357" width="901.4" height="15.0" fill="rgb(228,107,47)" rx="2" ry="2" />
<text  x="144.11" y="367.5" >do_idle</text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 0.13%)</title><rect x="18.9" y="277" width="1.5" height="15.0" fill="rgb(243,145,24)" rx="2" ry="2" />
<text  x="21.94" y="287.5" ></text>
</g>
<g >
<title>arrow::bit_util::BitReader::GetVlqInt (1 samples, 0.13%)</title><rect x="71.1" y="405" width="1.5" height="15.0" fill="rgb(218,0,31)" rx="2" ry="2" />
<text  x="74.09" y="415.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.13%)</title><rect x="138.1" y="293" width="1.5" height="15.0" fill="rgb(205,78,7)" rx="2" ry="2" />
<text  x="141.13" y="303.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (1 samples, 0.13%)</title><rect x="139.6" y="293" width="1.5" height="15.0" fill="rgb(241,133,5)" rx="2" ry="2" />
<text  x="142.62" y="303.5" ></text>
</g>
<g >
<title>common_nsleep (1 samples, 0.13%)</title><rect x="10.0" y="341" width="1.5" height="15.0" fill="rgb(207,71,52)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>x86_64_start_kernel (99 samples, 12.50%)</title><rect x="1042.5" y="389" width="147.5" height="15.0" fill="rgb(244,207,22)" rx="2" ry="2" />
<text  x="1045.50" y="399.5" >x86_64_start_kernel</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.13%)</title><rect x="10.0" y="389" width="1.5" height="15.0" fill="rgb(209,138,7)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>async_page_fault (1 samples, 0.13%)</title><rect x="138.1" y="389" width="1.5" height="15.0" fill="rgb(234,79,6)" rx="2" ry="2" />
<text  x="141.13" y="399.5" ></text>
</g>
<g >
<title>clock_nanosleep@GLIBC_2.2.5 (1 samples, 0.13%)</title><rect x="10.0" y="405" width="1.5" height="15.0" fill="rgb(254,113,31)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>arrow::util::RleDecoder::GetBatchWithDict&lt;parquet::ByteArray&gt; (23 samples, 2.90%)</title><rect x="74.1" y="405" width="34.2" height="15.0" fill="rgb(212,123,7)" rx="2" ry="2" />
<text  x="77.07" y="415.5" >ar..</text>
</g>
<g >
<title>raw_reader_v2 (83 samples, 10.48%)</title><rect x="16.0" y="421" width="123.6" height="15.0" fill="rgb(254,187,17)" rx="2" ry="2" />
<text  x="18.96" y="431.5" >raw_reader_v2</text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (1 samples, 0.13%)</title><rect x="17.4" y="389" width="1.5" height="15.0" fill="rgb(235,167,44)" rx="2" ry="2" />
<text  x="20.45" y="399.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (2 samples, 0.25%)</title><rect x="33.8" y="197" width="3.0" height="15.0" fill="rgb(208,202,23)" rx="2" ry="2" />
<text  x="36.84" y="207.5" ></text>
</g>
<g >
<title>arrow::internal::unpack32 (4 samples, 0.51%)</title><rect x="27.9" y="389" width="5.9" height="15.0" fill="rgb(210,34,45)" rx="2" ry="2" />
<text  x="30.88" y="399.5" ></text>
</g>
<g >
<title>arrow::io::internal::ValidateRange (1 samples, 0.13%)</title><rect x="72.6" y="405" width="1.5" height="15.0" fill="rgb(234,99,36)" rx="2" ry="2" />
<text  x="75.58" y="415.5" ></text>
</g>
<g >
<title>x86_64_start_reservations (99 samples, 12.50%)</title><rect x="1042.5" y="373" width="147.5" height="15.0" fill="rgb(231,124,44)" rx="2" ry="2" />
<text  x="1045.50" y="383.5" >x86_64_start_reser..</text>
</g>
<g >
<title>dl_main (1 samples, 0.13%)</title><rect x="18.9" y="373" width="1.5" height="15.0" fill="rgb(247,53,54)" rx="2" ry="2" />
<text  x="21.94" y="383.5" ></text>
</g>
<g >
<title>do_nanosleep (1 samples, 0.13%)</title><rect x="10.0" y="309" width="1.5" height="15.0" fill="rgb(230,141,6)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>__x64_sys_clock_nanosleep (1 samples, 0.13%)</title><rect x="10.0" y="357" width="1.5" height="15.0" fill="rgb(205,126,1)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>mmput (1 samples, 0.13%)</title><rect x="139.6" y="325" width="1.5" height="15.0" fill="rgb(214,201,40)" rx="2" ry="2" />
<text  x="142.62" y="335.5" ></text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 0.13%)</title><rect x="138.1" y="325" width="1.5" height="15.0" fill="rgb(240,195,52)" rx="2" ry="2" />
<text  x="141.13" y="335.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (7 samples, 0.88%)</title><rect x="33.8" y="373" width="10.5" height="15.0" fill="rgb(228,78,32)" rx="2" ry="2" />
<text  x="36.84" y="383.5" ></text>
</g>
<g >
<title>close (1 samples, 0.13%)</title><rect x="14.5" y="373" width="1.5" height="15.0" fill="rgb(211,59,29)" rx="2" ry="2" />
<text  x="17.47" y="383.5" ></text>
</g>
<g >
<title>__do_fault (1 samples, 0.13%)</title><rect x="18.9" y="213" width="1.5" height="15.0" fill="rgb(207,139,26)" rx="2" ry="2" />
<text  x="21.94" y="223.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (7 samples, 0.88%)</title><rect x="33.8" y="261" width="10.5" height="15.0" fill="rgb(215,34,7)" rx="2" ry="2" />
<text  x="36.84" y="271.5" ></text>
</g>
<g >
<title>all (792 samples, 100%)</title><rect x="10.0" y="437" width="1180.0" height="15.0" fill="rgb(236,225,42)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>_dl_relocate_object (1 samples, 0.13%)</title><rect x="18.9" y="357" width="1.5" height="15.0" fill="rgb(207,118,47)" rx="2" ry="2" />
<text  x="21.94" y="367.5" ></text>
</g>
<g >
<title>exit_mmap (1 samples, 0.13%)</title><rect x="139.6" y="309" width="1.5" height="15.0" fill="rgb(206,141,53)" rx="2" ry="2" />
<text  x="142.62" y="319.5" ></text>
</g>
<g >
<title>snappy::RawUncompress (16 samples, 2.02%)</title><rect x="44.3" y="389" width="23.8" height="15.0" fill="rgb(227,40,16)" rx="2" ry="2" />
<text  x="47.27" y="399.5" >s..</text>
</g>
<g >
<title>new_sync_read (7 samples, 0.88%)</title><rect x="33.8" y="277" width="10.5" height="15.0" fill="rgb(244,190,25)" rx="2" ry="2" />
<text  x="36.84" y="287.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.13%)</title><rect x="11.5" y="293" width="1.5" height="15.0" fill="rgb(206,97,46)" rx="2" ry="2" />
<text  x="14.49" y="303.5" ></text>
</g>
<g >
<title>node::EmitToJSStreamListener::OnStreamRead (1 samples, 0.13%)</title><rect x="13.0" y="261" width="1.5" height="15.0" fill="rgb(221,74,51)" rx="2" ry="2" />
<text  x="15.98" y="271.5" ></text>
</g>
<g >
<title>schedule_idle (1 samples, 0.13%)</title><rect x="1041.0" y="341" width="1.5" height="15.0" fill="rgb(222,152,28)" rx="2" ry="2" />
<text  x="1044.01" y="351.5" ></text>
</g>
<g >
<title>copy_process (1 samples, 0.13%)</title><rect x="11.5" y="325" width="1.5" height="15.0" fill="rgb(208,145,45)" rx="2" ry="2" />
<text  x="14.49" y="335.5" ></text>
</g>
<g >
<title>alloc_pages_current (4 samples, 0.51%)</title><rect x="36.8" y="149" width="6.0" height="15.0" fill="rgb(252,1,28)" rx="2" ry="2" />
<text  x="39.82" y="159.5" ></text>
</g>
<g >
<title>swapper (704 samples, 88.89%)</title><rect x="141.1" y="421" width="1048.9" height="15.0" fill="rgb(225,198,19)" rx="2" ry="2" />
<text  x="144.11" y="431.5" >swapper</text>
</g>
<g >
<title>arch_cpu_idle (604 samples, 76.26%)</title><rect x="141.1" y="325" width="899.9" height="15.0" fill="rgb(216,41,7)" rx="2" ry="2" />
<text  x="144.11" y="335.5" >arch_cpu_idle</text>
</g>
<g >
<title>__schedule (1 samples, 0.13%)</title><rect x="1041.0" y="325" width="1.5" height="15.0" fill="rgb(214,27,46)" rx="2" ry="2" />
<text  x="1044.01" y="335.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.13%)</title><rect x="139.6" y="229" width="1.5" height="15.0" fill="rgb(242,90,7)" rx="2" ry="2" />
<text  x="142.62" y="239.5" ></text>
</g>
<g >
<title>uv_run (1 samples, 0.13%)</title><rect x="13.0" y="341" width="1.5" height="15.0" fill="rgb(224,105,9)" rx="2" ry="2" />
<text  x="15.98" y="351.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.13%)</title><rect x="11.5" y="389" width="1.5" height="15.0" fill="rgb(242,20,5)" rx="2" ry="2" />
<text  x="14.49" y="399.5" ></text>
</g>
<g >
<title>generic_file_buffered_read (7 samples, 0.88%)</title><rect x="33.8" y="229" width="10.5" height="15.0" fill="rgb(229,42,1)" rx="2" ry="2" />
<text  x="36.84" y="239.5" ></text>
</g>
<g >
<title>page_cache_async_readahead (5 samples, 0.63%)</title><rect x="36.8" y="213" width="7.5" height="15.0" fill="rgb(239,71,36)" rx="2" ry="2" />
<text  x="39.82" y="223.5" ></text>
</g>
<g >
<title>page_cache_async_readahead (1 samples, 0.13%)</title><rect x="18.9" y="165" width="1.5" height="15.0" fill="rgb(246,6,34)" rx="2" ry="2" />
<text  x="21.94" y="175.5" ></text>
</g>
<g >
<title>node::SpinEventLoop (1 samples, 0.13%)</title><rect x="13.0" y="357" width="1.5" height="15.0" fill="rgb(232,35,41)" rx="2" ry="2" />
<text  x="15.98" y="367.5" ></text>
</g>
<g >
<title>parquet::internal::FindMinMaxAvx2 (11 samples, 1.39%)</title><rect x="121.7" y="405" width="16.4" height="15.0" fill="rgb(238,130,53)" rx="2" ry="2" />
<text  x="124.74" y="415.5" ></text>
</g>
<g >
<title>cpu_startup_entry (99 samples, 12.50%)</title><rect x="1042.5" y="309" width="147.5" height="15.0" fill="rgb(208,131,7)" rx="2" ry="2" />
<text  x="1045.50" y="319.5" >cpu_startup_entry</text>
</g>
<g >
<title>finish_task_switch (1 samples, 0.13%)</title><rect x="1041.0" y="309" width="1.5" height="15.0" fill="rgb(236,163,6)" rx="2" ry="2" />
<text  x="1044.01" y="319.5" ></text>
</g>
<g >
<title>read_pages (1 samples, 0.13%)</title><rect x="18.9" y="117" width="1.5" height="15.0" fill="rgb(232,227,12)" rx="2" ry="2" />
<text  x="21.94" y="127.5" ></text>
</g>
<g >
<title>__do_page_cache_readahead (1 samples, 0.13%)</title><rect x="18.9" y="133" width="1.5" height="15.0" fill="rgb(220,172,53)" rx="2" ry="2" />
<text  x="21.94" y="143.5" ></text>
</g>
<g >
<title>ondemand_readahead (5 samples, 0.63%)</title><rect x="36.8" y="197" width="7.5" height="15.0" fill="rgb(229,136,54)" rx="2" ry="2" />
<text  x="39.82" y="207.5" ></text>
</g>
<g >
<title>__libc_start_main (1 samples, 0.13%)</title><rect x="13.0" y="405" width="1.5" height="15.0" fill="rgb(247,229,7)" rx="2" ry="2" />
<text  x="15.98" y="415.5" ></text>
</g>
<g >
<title>do_async_page_fault (1 samples, 0.13%)</title><rect x="18.9" y="325" width="1.5" height="15.0" fill="rgb(235,5,38)" rx="2" ry="2" />
<text  x="21.94" y="335.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1 samples, 0.13%)</title><rect x="138.1" y="277" width="1.5" height="15.0" fill="rgb(237,113,21)" rx="2" ry="2" />
<text  x="141.13" y="287.5" ></text>
</g>
<g >
<title>__add_to_page_cache_locked (1 samples, 0.13%)</title><rect x="18.9" y="53" width="1.5" height="15.0" fill="rgb(244,156,23)" rx="2" ry="2" />
<text  x="21.94" y="63.5" ></text>
</g>
<g >
<title>arch_call_rest_init (99 samples, 12.50%)</title><rect x="1042.5" y="341" width="147.5" height="15.0" fill="rgb(222,158,15)" rx="2" ry="2" />
<text  x="1045.50" y="351.5" >arch_call_rest_init</text>
</g>
<g >
<title>__vfs_read (7 samples, 0.88%)</title><rect x="33.8" y="293" width="10.5" height="15.0" fill="rgb(241,115,10)" rx="2" ry="2" />
<text  x="36.84" y="303.5" ></text>
</g>
<g >
<title>arrow::bit_util::BitReader::GetBatch&lt;int&gt; (2 samples, 0.25%)</title><rect x="68.1" y="405" width="3.0" height="15.0" fill="rgb(208,29,39)" rx="2" ry="2" />
<text  x="71.11" y="415.5" ></text>
</g>
<g >
<title>uv__read (1 samples, 0.13%)</title><rect x="13.0" y="293" width="1.5" height="15.0" fill="rgb(218,150,23)" rx="2" ry="2" />
<text  x="15.98" y="303.5" ></text>
</g>
<g >
<title>_do_fork (1 samples, 0.13%)</title><rect x="11.5" y="341" width="1.5" height="15.0" fill="rgb(240,119,31)" rx="2" ry="2" />
<text  x="14.49" y="351.5" ></text>
</g>
<g >
<title>snappy::RawUncompress (1 samples, 0.13%)</title><rect x="138.1" y="405" width="1.5" height="15.0" fill="rgb(242,10,39)" rx="2" ry="2" />
<text  x="141.13" y="415.5" ></text>
</g>
<g >
<title>default_idle_call (604 samples, 76.26%)</title><rect x="141.1" y="341" width="899.9" height="15.0" fill="rgb(245,51,13)" rx="2" ry="2" />
<text  x="144.11" y="351.5" >default_idle_call</text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.13%)</title><rect x="138.1" y="309" width="1.5" height="15.0" fill="rgb(237,93,28)" rx="2" ry="2" />
<text  x="141.13" y="319.5" ></text>
</g>
<g >
<title>native_safe_halt (604 samples, 76.26%)</title><rect x="141.1" y="309" width="899.9" height="15.0" fill="rgb(254,135,0)" rx="2" ry="2" />
<text  x="144.11" y="319.5" >native_safe_halt</text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.13%)</title><rect x="18.9" y="261" width="1.5" height="15.0" fill="rgb(226,38,47)" rx="2" ry="2" />
<text  x="21.94" y="271.5" ></text>
</g>
<g >
<title>start_secondary (605 samples, 76.39%)</title><rect x="141.1" y="389" width="901.4" height="15.0" fill="rgb(233,202,39)" rx="2" ry="2" />
<text  x="144.11" y="399.5" >start_secondary</text>
</g>
<g >
<title>free_pages_and_swap_cache (1 samples, 0.13%)</title><rect x="139.6" y="261" width="1.5" height="15.0" fill="rgb(219,219,15)" rx="2" ry="2" />
<text  x="142.62" y="271.5" ></text>
</g>
<g >
<title>cpuUsage.sh (1 samples, 0.13%)</title><rect x="11.5" y="421" width="1.5" height="15.0" fill="rgb(214,161,28)" rx="2" ry="2" />
<text  x="14.49" y="431.5" ></text>
</g>
<g >
<title>__fork (1 samples, 0.13%)</title><rect x="11.5" y="405" width="1.5" height="15.0" fill="rgb(247,57,35)" rx="2" ry="2" />
<text  x="14.49" y="415.5" ></text>
</g>
<g >
<title>parquet::(anonymous namespace)::TypedColumnReaderImpl&lt;parquet::PhysicalType&lt; (7 samples, 0.88%)</title><rect x="111.3" y="405" width="10.4" height="15.0" fill="rgb(240,58,32)" rx="2" ry="2" />
<text  x="114.31" y="415.5" ></text>
</g>
<g >
<title>secondary_startup_64 (704 samples, 88.89%)</title><rect x="141.1" y="405" width="1048.9" height="15.0" fill="rgb(254,218,40)" rx="2" ry="2" />
<text  x="144.11" y="415.5" >secondary_startup_64</text>
</g>
<g >
<title>ksys_pread64 (7 samples, 0.88%)</title><rect x="33.8" y="325" width="10.5" height="15.0" fill="rgb(245,160,18)" rx="2" ry="2" />
<text  x="36.84" y="335.5" ></text>
</g>
<g >
<title>hrtimer_nanosleep (1 samples, 0.13%)</title><rect x="10.0" y="325" width="1.5" height="15.0" fill="rgb(209,201,14)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>[unknown] (34 samples, 4.29%)</title><rect x="17.4" y="405" width="50.7" height="15.0" fill="rgb(223,21,28)" rx="2" ry="2" />
<text  x="20.45" y="415.5" >[unkn..</text>
</g>
<g >
<title>uv__io_poll (1 samples, 0.13%)</title><rect x="13.0" y="325" width="1.5" height="15.0" fill="rgb(247,186,8)" rx="2" ry="2" />
<text  x="15.98" y="335.5" ></text>
</g>
<g >
<title>arrow::bit_util::BitReader::GetBatch&lt;int&gt; (5 samples, 0.63%)</title><rect x="20.4" y="389" width="7.5" height="15.0" fill="rgb(245,32,41)" rx="2" ry="2" />
<text  x="23.43" y="399.5" ></text>
</g>
<g >
<title>rest_init (99 samples, 12.50%)</title><rect x="1042.5" y="325" width="147.5" height="15.0" fill="rgb(206,78,18)" rx="2" ry="2" />
<text  x="1045.50" y="335.5" >rest_init</text>
</g>
<g >
<title>pread64 (7 samples, 0.88%)</title><rect x="33.8" y="389" width="10.5" height="15.0" fill="rgb(224,204,16)" rx="2" ry="2" />
<text  x="36.84" y="399.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (4 samples, 0.51%)</title><rect x="36.8" y="133" width="6.0" height="15.0" fill="rgb(230,229,20)" rx="2" ry="2" />
<text  x="39.82" y="143.5" ></text>
</g>
<g >
<title>arrow::util::RleDecoder::NextCounts&lt;int&gt; (2 samples, 0.25%)</title><rect x="108.3" y="405" width="3.0" height="15.0" fill="rgb(221,69,10)" rx="2" ry="2" />
<text  x="111.33" y="415.5" ></text>
</g>
<g >
<title>node::AsyncWrap::MakeCallback (1 samples, 0.13%)</title><rect x="13.0" y="245" width="1.5" height="15.0" fill="rgb(233,41,5)" rx="2" ry="2" />
<text  x="15.98" y="255.5" ></text>
</g>
<g >
<title>async_page_fault (1 samples, 0.13%)</title><rect x="18.9" y="341" width="1.5" height="15.0" fill="rgb(247,147,54)" rx="2" ry="2" />
<text  x="21.94" y="351.5" ></text>
</g>
<g >
<title>get_page_from_freelist (1 samples, 0.13%)</title><rect x="41.3" y="117" width="1.5" height="15.0" fill="rgb(251,60,27)" rx="2" ry="2" />
<text  x="44.29" y="127.5" ></text>
</g>
<g >
<title>sched_autogroup_fork (1 samples, 0.13%)</title><rect x="11.5" y="309" width="1.5" height="15.0" fill="rgb(225,195,42)" rx="2" ry="2" />
<text  x="14.49" y="319.5" ></text>
</g>
<g >
<title>page_poisoning_enabled (1 samples, 0.13%)</title><rect x="41.3" y="101" width="1.5" height="15.0" fill="rgb(209,8,4)" rx="2" ry="2" />
<text  x="44.29" y="111.5" ></text>
</g>
<g >
<title>uv__stream_io (1 samples, 0.13%)</title><rect x="13.0" y="309" width="1.5" height="15.0" fill="rgb(222,167,3)" rx="2" ry="2" />
<text  x="15.98" y="319.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.13%)</title><rect x="14.5" y="389" width="1.5" height="15.0" fill="rgb(244,160,38)" rx="2" ry="2" />
<text  x="17.47" y="399.5" ></text>
</g>
<g >
<title>__do_page_cache_readahead (5 samples, 0.63%)</title><rect x="36.8" y="181" width="7.5" height="15.0" fill="rgb(242,213,29)" rx="2" ry="2" />
<text  x="39.82" y="191.5" ></text>
</g>
<g >
<title>do_fault (1 samples, 0.13%)</title><rect x="18.9" y="229" width="1.5" height="15.0" fill="rgb(219,167,0)" rx="2" ry="2" />
<text  x="21.94" y="239.5" ></text>
</g>
<g >
<title>filemap_fault (1 samples, 0.13%)</title><rect x="18.9" y="181" width="1.5" height="15.0" fill="rgb(221,21,23)" rx="2" ry="2" />
<text  x="21.94" y="191.5" ></text>
</g>
<g >
<title>ondemand_readahead (1 samples, 0.13%)</title><rect x="18.9" y="149" width="1.5" height="15.0" fill="rgb(242,123,31)" rx="2" ry="2" />
<text  x="21.94" y="159.5" ></text>
</g>
<g >
<title>ps (1 samples, 0.13%)</title><rect x="14.5" y="421" width="1.5" height="15.0" fill="rgb(235,194,42)" rx="2" ry="2" />
<text  x="17.47" y="431.5" ></text>
</g>
<g >
<title>default_idle_call (99 samples, 12.50%)</title><rect x="1042.5" y="277" width="147.5" height="15.0" fill="rgb(216,5,35)" rx="2" ry="2" />
<text  x="1045.50" y="287.5" >default_idle_call</text>
</g>
<g >
<title>vfs_read (7 samples, 0.88%)</title><rect x="33.8" y="309" width="10.5" height="15.0" fill="rgb(252,95,32)" rx="2" ry="2" />
<text  x="36.84" y="319.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (1 samples, 0.13%)</title><rect x="139.6" y="277" width="1.5" height="15.0" fill="rgb(210,198,53)" rx="2" ry="2" />
<text  x="142.62" y="287.5" ></text>
</g>
<g >
<title>start_kernel (99 samples, 12.50%)</title><rect x="1042.5" y="357" width="147.5" height="15.0" fill="rgb(243,148,36)" rx="2" ry="2" />
<text  x="1045.50" y="367.5" >start_kernel</text>
</g>
<g >
<title>do_idle (99 samples, 12.50%)</title><rect x="1042.5" y="293" width="147.5" height="15.0" fill="rgb(245,133,47)" rx="2" ry="2" />
<text  x="1045.50" y="303.5" >do_idle</text>
</g>
<g >
<title>do_exit (1 samples, 0.13%)</title><rect x="139.6" y="341" width="1.5" height="15.0" fill="rgb(250,153,28)" rx="2" ry="2" />
<text  x="142.62" y="351.5" ></text>
</g>
<g >
<title>sh (1 samples, 0.13%)</title><rect x="139.6" y="421" width="1.5" height="15.0" fill="rgb(244,149,18)" rx="2" ry="2" />
<text  x="142.62" y="431.5" ></text>
</g>
<g >
<title>node (1 samples, 0.13%)</title><rect x="13.0" y="421" width="1.5" height="15.0" fill="rgb(235,115,12)" rx="2" ry="2" />
<text  x="15.98" y="431.5" ></text>
</g>
<g >
<title>node::NodeMainInstance::Run (1 samples, 0.13%)</title><rect x="13.0" y="373" width="1.5" height="15.0" fill="rgb(246,144,32)" rx="2" ry="2" />
<text  x="15.98" y="383.5" ></text>
</g>
<g >
<title>__x64_sys_exit_group (1 samples, 0.13%)</title><rect x="139.6" y="373" width="1.5" height="15.0" fill="rgb(212,131,51)" rx="2" ry="2" />
<text  x="142.62" y="383.5" ></text>
</g>
<g >
<title>__x64_sys_pread64 (7 samples, 0.88%)</title><rect x="33.8" y="341" width="10.5" height="15.0" fill="rgb(213,169,39)" rx="2" ry="2" />
<text  x="36.84" y="351.5" ></text>
</g>
<g >
<title>node::LibuvStreamWrap::OnUvRead (1 samples, 0.13%)</title><rect x="13.0" y="277" width="1.5" height="15.0" fill="rgb(222,129,14)" rx="2" ry="2" />
<text  x="15.98" y="287.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.13%)</title><rect x="11.5" y="373" width="1.5" height="15.0" fill="rgb(237,57,50)" rx="2" ry="2" />
<text  x="14.49" y="383.5" ></text>
</g>
<g >
<title>do_async_page_fault (1 samples, 0.13%)</title><rect x="138.1" y="373" width="1.5" height="15.0" fill="rgb(254,48,7)" rx="2" ry="2" />
<text  x="141.13" y="383.5" ></text>
</g>
<g >
<title>xa_load (1 samples, 0.13%)</title><rect x="42.8" y="165" width="1.5" height="15.0" fill="rgb(235,222,12)" rx="2" ry="2" />
<text  x="45.78" y="175.5" ></text>
</g>
<g >
<title>add_to_page_cache_lru (1 samples, 0.13%)</title><rect x="18.9" y="69" width="1.5" height="15.0" fill="rgb(205,18,16)" rx="2" ry="2" />
<text  x="21.94" y="79.5" ></text>
</g>
<g >
<title>cpu_startup_entry (605 samples, 76.39%)</title><rect x="141.1" y="373" width="901.4" height="15.0" fill="rgb(207,194,24)" rx="2" ry="2" />
<text  x="144.11" y="383.5" >cpu_startup_entry</text>
</g>
<g >
<title>ext4_filemap_fault (1 samples, 0.13%)</title><rect x="18.9" y="197" width="1.5" height="15.0" fill="rgb(245,210,39)" rx="2" ry="2" />
<text  x="21.94" y="207.5" ></text>
</g>
<g >
<title>do_page_fault (1 samples, 0.13%)</title><rect x="138.1" y="357" width="1.5" height="15.0" fill="rgb(229,43,13)" rx="2" ry="2" />
<text  x="141.13" y="367.5" ></text>
</g>
<g >
<title>node::Start (1 samples, 0.13%)</title><rect x="13.0" y="389" width="1.5" height="15.0" fill="rgb(252,201,41)" rx="2" ry="2" />
<text  x="15.98" y="399.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.13%)</title><rect x="139.6" y="389" width="1.5" height="15.0" fill="rgb(245,149,52)" rx="2" ry="2" />
<text  x="142.62" y="399.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.13%)</title><rect x="18.9" y="245" width="1.5" height="15.0" fill="rgb(251,111,4)" rx="2" ry="2" />
<text  x="21.94" y="255.5" ></text>
</g>
<g >
<title>arch_cpu_idle (99 samples, 12.50%)</title><rect x="1042.5" y="261" width="147.5" height="15.0" fill="rgb(237,34,26)" rx="2" ry="2" />
<text  x="1045.50" y="271.5" >arch_cpu_idle</text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.13%)</title><rect x="10.0" y="373" width="1.5" height="15.0" fill="rgb(245,213,35)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>AliYunDun (1 samples, 0.13%)</title><rect x="10.0" y="421" width="1.5" height="15.0" fill="rgb(217,170,52)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>ext4_mpage_readpages (1 samples, 0.13%)</title><rect x="18.9" y="85" width="1.5" height="15.0" fill="rgb(226,51,49)" rx="2" ry="2" />
<text  x="21.94" y="95.5" ></text>
</g>
<g >
<title>[libparquet.so.900.0.0] (1 samples, 0.13%)</title><rect x="16.0" y="405" width="1.4" height="15.0" fill="rgb(209,48,42)" rx="2" ry="2" />
<text  x="18.96" y="415.5" ></text>
</g>
<g >
<title>__x64_sys_clone (1 samples, 0.13%)</title><rect x="11.5" y="357" width="1.5" height="15.0" fill="rgb(220,5,1)" rx="2" ry="2" />
<text  x="14.49" y="367.5" ></text>
</g>
<g >
<title>native_safe_halt (99 samples, 12.50%)</title><rect x="1042.5" y="245" width="147.5" height="15.0" fill="rgb(246,151,41)" rx="2" ry="2" />
<text  x="1045.50" y="255.5" >native_safe_halt</text>
</g>
<g >
<title>do_group_exit (1 samples, 0.13%)</title><rect x="139.6" y="357" width="1.5" height="15.0" fill="rgb(226,198,15)" rx="2" ry="2" />
<text  x="142.62" y="367.5" ></text>
</g>
<g >
<title>__do_page_fault (1 samples, 0.13%)</title><rect x="18.9" y="293" width="1.5" height="15.0" fill="rgb(250,25,33)" rx="2" ry="2" />
<text  x="21.94" y="303.5" ></text>
</g>
<g >
<title>release_pages (1 samples, 0.13%)</title><rect x="139.6" y="245" width="1.5" height="15.0" fill="rgb(241,177,18)" rx="2" ry="2" />
<text  x="142.62" y="255.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.13%)</title><rect x="14.5" y="405" width="1.5" height="15.0" fill="rgb(207,53,41)" rx="2" ry="2" />
<text  x="17.47" y="415.5" ></text>
</g>
<g >
<title>ext4_readpages (1 samples, 0.13%)</title><rect x="18.9" y="101" width="1.5" height="15.0" fill="rgb(251,53,53)" rx="2" ry="2" />
<text  x="21.94" y="111.5" ></text>
</g>
<g >
<title>do_page_fault (1 samples, 0.13%)</title><rect x="18.9" y="309" width="1.5" height="15.0" fill="rgb(210,48,29)" rx="2" ry="2" />
<text  x="21.94" y="319.5" ></text>
</g>
<g >
<title>do_syscall_64 (7 samples, 0.88%)</title><rect x="33.8" y="357" width="10.5" height="15.0" fill="rgb(219,97,35)" rx="2" ry="2" />
<text  x="36.84" y="367.5" ></text>
</g>
<g >
<title>__do_page_fault (1 samples, 0.13%)</title><rect x="138.1" y="341" width="1.5" height="15.0" fill="rgb(226,184,48)" rx="2" ry="2" />
<text  x="141.13" y="351.5" ></text>
</g>
</g>
</svg>
